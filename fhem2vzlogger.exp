#!/usr/bin/expect
# just do a chmod 755 one the script
# ./YOUR_SCRIPT_NAME.sh $YOUHOST $PORT
# if you get "Escape character is '^]'" as the output it means got connected otherwise it has failed
#
# http://inguza.com/document/expect-and-tcl-mini-reference-manual
#

set readinginc [lindex $argv 0]
set stamp ".stamp"
set ip [lindex $argv 1]
set port [lindex $argv 2]
set delay [lindex $argv 3]

# disable log to stdout
log_user 0
#log_file -a logs/fhem2vzloggerusr
#exp_internal -f logs/fhem2vzloggerint 0
#exp_internal 1
set timeout 10

if {[llength $argv] == 0} {
  send_user "Usage: scriptname \'readings.tcl'\ \'fhem-ip\' \'fhem-port\' \'delay\'\n"
  exit 1
}

# create stamp file
set fp [open $readinginc$stamp a+]
close $fp
# read timestamp from the file
set fp [open $readinginc$stamp r]
set told [read $fp]
close $fp
# eval last reading
set tnow [clock seconds]
if {[string length $told] == 0} { set told 0 }
if {[expr $tnow - $delay] <= $told} { return }
#update timestamp and start reading
set fp [open $readinginc$stamp w]
puts $fp $tnow
close $fp

# wait for connection
spawn telnet $ip $port
expect {
  "$ip" { }
  timeout { exit 1 }
  default { exit 1 }
}

# define the readings of interest.
source $readinginc

foreach device [array names readings] {
   foreach reading $readings($device) {
   # settle down telenet load a bit (sleep 50ms)
      sleep 0.05
   # identifier
      set identifier $device.$reading
   # catch timestamp
      set cmd "{time_str2num(ReadingsTimestamp(\"$device\",\"$reading\",\"\"))}\r"
      send $cmd
      expect {
         $cmd                                { exp_continue }
         -re {[0-9]{10}(?=\s+)}              { set ts $expect_out(0,string) }
         timeout                             { exit 1 }
         default                             { exit 1 }
      }
   # catch reading value
      set cmd "{ReadingsVal(\"$device\",\"$reading\",\"\")}\r"
      send $cmd
      expect {
         $cmd                                { exp_continue }
         -re {[+-]?([0-9]+\.)?[0-9]+(?=\s+)} { set val $expect_out(0,string) }
         timeout                             { exit 1 }
         default                             { exit 1 }
      }
      if { [info exists ts] && [info exists val] } {
         # echo $i $t $v
         # i.e. Garden.temperature 1376398997 18.3
         puts "$identifier $ts $val"
      }
      if { [info exists ts] }                { unset ts }
      if { [info exists val] }               { unset val }
   }
}

# exit telnet gracefully
send "exit\n"
expect eof

